"""
Base Agent Class for MADF Specialized Agents

Provides common interface and functionality for all agent types
"""

from abc import ABC, abstractmethod
from typing import List, Dict, Any


class BaseAgent(ABC):
    """Abstract base class for all MADF agents"""

    def __init__(self, name: str, role: str):
        self.name = name
        self.role = role
        self._tools = []

    @abstractmethod
    def get_available_tools(self) -> List[str]:
        """Return list of tools available to this agent"""
        pass

    @abstractmethod
    def process_task(self, task_description: str, context: Dict[str, Any]) -> Dict[str, Any]:
        """Process a task and return results"""
        pass

    def add_tool(self, tool_name: str):
        """Add a tool to agent's available tools"""
        if tool_name not in self._tools:
            self._tools.append(tool_name)

    def remove_tool(self, tool_name: str):
        """Remove a tool from agent's available tools"""
        if tool_name in self._tools:
            self._tools.remove(tool_name)