{
  "permissions": {
    "allow": [
      "Bash(curl:*)",
      "Bash(bash)",
      "Bash(winget install:*)",
      "Bash(refreshenv)",
      "Bash(where:*)",
      "Bash($env:PATH = $env:PATH + \";C:\\Program Files\\jq\")",
      "Read(//c/Program Files/**)",
      "Bash(export PATH=\"$PATH:/c/Users/szmen/AppData/Local/Microsoft/WinGet/Packages/jqlang.jq_Microsoft.Winget.Source_8wekyb3d8bbwe\")",
      "Read(//c/Users/szmen/.claude/**)",
      "Bash(~/.claude/statusline/statusline.sh:*)",
      "Bash(npm install:*)",
      "Bash(npm search:*)",
      "Bash(mkdir:*)",
      "Bash(for project in alphaseek 1clickman citybadge project4 project5 project6)",
      "Bash(do mkdir -p \"projects/$project\"/{src,tests,docs,config,.github/workflows,assets})",
      "Bash(done)",
      "Bash(tree:*)",
      "Bash(git init:*)",
      "Bash(compgen:*)",
      "Read(//c/Users/szmen/AppData/Roaming/npm/node_modules/@modelcontextprotocol/server-sequential-thinking/**)",
      "Bash(npm info:*)",
      "Seqt_*",
      "Read(//c/Users/szmen/OneDrive/AnaJupyter/**)",
      "Bash(dir:*)",
      "Bash(copy:*)",
      "Bash(node:*)",
      "Read(//c/Users/szmen/AppData/Roaming/npm/node_modules/@upstash/context7-mcp/**)",
      "WebSearch",
      "Bash(npx:*)",
      "Task_*",
      "Ghub_*",
      "WebFetch(domain:github.com)",
      "Prxy_*",
      "Bash(winget search:*)",
      "Bash(powershell:*)",
      "Bash(findstr:*)",
      "Lang_*",
      "Bash(cat:*)",
      "File_*",
      "Read(//c/Users/szmen/AppData/Local/npm-cache/**)",
      "Outl_*",
      "Obsi_*",
      "Ctx7_*",
      "Read(//c/Users/szmen/AppData/Roaming/Cursor/User/**)",
      "Bash(stty:*)",
      "Bash(uvx:*)",
      "Bash(cp:*)",
      "Bash(python:*)",
      "Bash(chmod:*)",
      "Bash(rm:*)",
      "Bash(timeout:*)",
      "Bash(npm --version)",
      "Read(//d//**)",
      "WebFetch(domain:docs.claude.com)",
      "Bash(mcp-proxy:*)",
      "Bash(pkill:*)",
      "Bash(taskkill:*)",
      "Bash(npm uninstall:*)",
      "Bash(gh repo create:*)",
      "Bash(claude mcp add:*)",
      "Bash(claude mcp:*)",
      "Bash(tasklist)",
      "Bash(set)",
      "Bash(gh api:*)",
      "Bash(set ENABLED_MCP_SERVERS=filesystem)",
      "Bash(set ENABLED_MCP_SERVERS=sentry)",
      "Bash(test-github-tools.bat)",
      "Bash(cmd /c:*)",
      "Bash(echo:*)",
      "mcp__github__get_user_info",
      "mcp__github__search_repositories",
      "mcp__github__list_workflows",
      "Bash(export:*)",
      "Bash(FORCE_DOC_REFRESH=true TARGET_DOCS=all node .claude/scripts/cache-docs-simple.js)",
      "Bash(set FORCE_DOC_REFRESH=true)",
      "Bash(set TARGET_DOCS=all)",
      "Read(//c/Users/szmen/Pictures/Screenshots/**)",
      "mcp__sequential-thinking__sequentialthinking",
      "Bash(pip install:*)",
      "Read(//c/Users/szmen/anaconda3/Lib/site-packages/**)",
      "Read(//d/BT/**)",
      "Read(//c/Users/szmen/**)",
      "Bash(claude --version)",
      "Bash(npm config:*)",
      "Bash($env:PATH = $env:PATH + \";C:\\Users\\szmen\\AppData\\Roaming\\npm\")",
      "Bash(find:*)",
      "Bash(git stash:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(uv run:*)",
      "Bash(pip show:*)",
      "Bash(uv pip install:*)",
      "Bash(uv pip:*)",
      "Bash(if not exist \"archive\\tests\" mkdir archivetests)",
      "Bash(move teststest_story_1_2_analyst_agent.py archiveteststest_story_1_2_analyst_agent_MOCK.py)",
      "Bash(tee:*)",
      "SlashCommand(/BMad:agents:qa)",
      "Bash(\"D:\\Ollama\\ollama.exe\" list)",
      "Bash(\"D:\\Ollama\\ollama.exe\" pull qwen2.5:7b)",
      "Bash(\"D:\\Ollama\\ollama.exe\" create qwen2.5-mcp -f ollama_mcp_modelfile)",
      "Bash(set ANTHROPIC_API_KEY:*)",
      "Bash(netstat:*)",
      "Bash(\"D:\\Ollama\\ollama.exe\" create qwen2.5-mcp -f \"D:\\dev\\MADF\\experimental\\ollama_mcp_modelfile\")",
      "Bash(set TARGET_DOCS=claude-api,claude-code-getting-started)",
      "Bash(git mv:*)",
      "Bash(move srccoregraphiti_client.py srccoredeprecated )",
      "Bash(move srccoreobsidian_client.py srccoredeprecated )",
      "Bash(move srccorefilesystem_client.py srccoredeprecated)",
      "Read(//d/Programs/anaconda3/Lib/site-packages/graphiti_core/**)",
      "Read(//d/Programs/anaconda3/Lib/site-packages//**)",
      "Bash(docker run:*)",
      "Bash(\"D:\\Ollama\\ollama.exe\" pull nomic-embed-text)",
      "Bash(pytest:*)",
      "Bash(docker:*)",
      "Bash(set POSTGRES_CONNECTION_STRING=postgresql://madf:test_password@localhost:5433/madf_logs)",
      "Bash(test:*)",
      "Bash(npm cache clean:*)",
      "Bash(pip cache:*)",
      "Bash(for:*)",
      "Bash(grep:*)",
      "Bash(SKIP_BROWSER_TESTS=false uv run python -m pytest tests/test_story_1_6_end_to_end.py::TestTask1ChromeDevToolsIntegration::test_chrome_devtools_list_pages -v --tb=short -s)",
      "Bash(SKIP_BROWSER_TESTS=false uv run python -m pytest tests/test_story_1_6_end_to_end.py::TestTask1ChromeDevToolsIntegration::test_browser_automation_workflow -v --tb=short -s)",
      "Bash(move:*)",
      "Bash(awk:*)",
      "Bash(gh:*)",
      "Bash(if [ -d \"src/agents\" ])",
      "Bash(then git mv src/agents/*.py archive/epic-1-reference/agents/)",
      "Bash(else echo \"src/agents does not exist\")",
      "Bash(fi)",
      "Bash(git rm:*)",
      "Bash(git checkout:*)"
    ],
    "deny": [],
    "ask": []
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [],
  "hooks": {},
  "outputStyle": "madf-communication"
}